import streamlit as st
import openai
import requests
from bs4 import BeautifulSoup

# Configura√ß√£o do cliente OpenAI com API Key
client = openai.OpenAI(api_key=st.secrets["openai"]["api_key"])

st.set_page_config(page_title="Classificador e Gerador de Atividades", layout="centered")
st.title("üìò Classificador de Atividades em Planos de Aula")

# Fun√ß√£o para extrair conte√∫do da p√°gina
def extrair_conteudo_da_url(url):
    try:
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            return None, f"Erro ao acessar a URL. C√≥digo {response.status_code}"

        soup = BeautifulSoup(response.text, 'html.parser')

        # Esta parte deve ser adaptada com base na estrutura real do HTML da Nova Escola
        # Aqui tentamos encontrar blocos de conte√∫do comuns
        container = soup.find('div', class_='sc-bcXHqe')  # Exemplo: container geral
        if not container:
            container = soup.find('main')

        texto = container.get_text(separator='\n') if container else soup.get_text()
        return texto.strip(), None
    except Exception as e:
        return None, str(e)

# Inicializa sess√£o
if "atividades_anteriores" not in st.session_state:
    st.session_state.atividades_anteriores = ""

# Input de URL
url_input = st.text_input("Informe a URL do plano de aula:", placeholder="https://novaescola.org.br/planos-de-aula/...")

# Bot√£o de classifica√ß√£o
if st.button("Classificar Atividades"):
    if not url_input:
        st.warning("Por favor, insira uma URL.")
    else:
        with st.spinner("Extraindo conte√∫do da URL..."):
            texto_extraido, erro = extrair_conteudo_da_url(url_input)
        
        if erro:
            st.error(f"Erro ao processar a URL: {erro}")
        elif not texto_extraido or len(texto_extraido) < 100:
            st.warning("N√£o foi poss√≠vel extrair conte√∫do suficiente da p√°gina.")
        else:
            with st.spinner("Analisando conte√∫do com GPT..."):
                prompt_classificacao = f"""
Voc√™ √© um especialista em educa√ß√£o. Analise o conte√∫do a seguir de um plano de aula e identifique claramente as atividades pedag√≥gicas propostas. Para cada uma, classifique o n√≠vel de dificuldade como:

- **B√°sico**: leitura, c√≥pia, reconhecimento simples;
- **Intermedi√°rio**: interpreta√ß√£o, organiza√ß√£o, produ√ß√£o com apoio;
- **Avan√ßado**: produ√ß√£o autoral, debate, investiga√ß√£o complexa.

Retorne as atividades com uma breve descri√ß√£o e sua classifica√ß√£o de dificuldade.

Conte√∫do do plano:

{texto_extraido}
"""

                try:
                    response = client.chat.completions.create(
                        model="gpt-4o",
                        messages=[
                            {"role": "system", "content": "Voc√™ √© um classificador pedag√≥gico especialista em planos de aula."},
                            {"role": "user", "content": prompt_classificacao}
                        ],
                        temperature=0.3,
                        max_tokens=1200
                    )

                    resultado = response.choices[0].message.content.strip()
                    st.session_state.atividades_anteriores = resultado

                    st.success("Atividades classificadas:")
                    st.markdown(resultado)

                except Exception as e:
                    st.error(f"Erro na classifica√ß√£o: {str(e)}")

# Se j√° classificou
if st.session_state.atividades_anteriores:
    st.divider()
    st.subheader("üéØ Gerar Novas Atividades")

    nivel_desejado = st.selectbox(
        "Escolha o n√≠vel de dificuldade para as novas atividades:",
        ["b√°sico", "intermedi√°rio", "avan√ßado"]
    )

    if st.button("Gerar Novas Atividades"):
        with st.spinner("Gerando novas atividades..."):
            prompt_geracao = f"""
Com base nas seguintes atividades j√° existentes de um plano de aula:

{st.session_state.atividades_anteriores}

Crie novas atividades no n√≠vel de dificuldade **{nivel_desejado}**, mantendo coer√™ncia com o tema original, mas sem repetir exatamente as anteriores.

Descreva cada nova atividade com clareza.
"""

            try:
                resposta_geracao = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um criador de atividades educacionais com foco pedag√≥gico."},
                        {"role": "user", "content": prompt_geracao}
                    ],
                    temperature=0.7,
                    max_tokens=1000
                )

                novas_atividades = resposta_geracao.choices[0].message.content.strip()
                st.subheader("üÜï Novas Atividades Geradas:")
                st.markdown(novas_atividades)

            except Exception as e:
                st.error(f"Erro ao gerar novas atividades: {str(e)}")
