import streamlit as st
import openai

# Setup
st.set_page_config(page_title="Classificador e Gerador de Atividades", layout="centered")
st.title("üìò Classificador e Gerador de Atividades")

# Chave da API
client = openai.OpenAI(api_key=st.secrets["openai"]["api_key"])

# Input URL
url_input = st.text_input("Informe a URL do plano de aula:", placeholder="https://novaescola.org.br/planos-de-aula/...")

# Inicializa sess√£o
if "atividades_anteriores" not in st.session_state:
    st.session_state.atividades_anteriores = ""

# Bot√£o de classifica√ß√£o
if st.button("Classificar Atividades"):
    if not url_input:
        st.warning("Por favor, insira uma URL.")
    else:
        with st.spinner("Analisando o plano de aula..."):
            prompt_classificacao = f"""
Voc√™ √© um especialista em educa√ß√£o. Sua tarefa √© analisar o plano de aula encontrado na URL abaixo, identificar as atividades pedag√≥gicas propostas e classific√°-las como **b√°sico**, **intermedi√°rio** ou **avan√ßado**, com base na complexidade e autonomia exigida dos estudantes.

Crit√©rios:
- **B√°sico**: atividades de leitura, c√≥pia, reconhecimento simples.
- **Intermedi√°rio**: interpreta√ß√£o, organiza√ß√£o de ideias, produ√ß√£o com apoio.
- **Avan√ßado**: produ√ß√£o autoral, resolu√ß√£o complexa, debates ou cria√ß√£o livre.

Retorne um texto corrido com a descri√ß√£o de cada atividade proposta e sua classifica√ß√£o correspondente.

URL: {url_input}
"""

            try:
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um classificador pedag√≥gico especialista em planos de aula."},
                        {"role": "user", "content": prompt_classificacao}
                    ],
                    temperature=0.3,
                    max_tokens=1200
                )

                resultado = response.choices[0].message.content.strip()
                st.session_state.atividades_anteriores = resultado

                st.success("Atividades classificadas:")
                st.markdown(resultado)

            except Exception as e:
                st.error(f"Erro na classifica√ß√£o: {str(e)}")

# Se j√° existem atividades classificadas:
if st.session_state.atividades_anteriores:
    st.divider()
    st.subheader("üéØ Gerar Novas Atividades")

    nivel_desejado = st.selectbox(
        "Escolha o n√≠vel de dificuldade para as novas atividades:",
        ["b√°sico", "intermedi√°rio", "avan√ßado"]
    )

    if st.button("Gerar Novas Atividades"):
        with st.spinner("Gerando novas atividades..."):
            prompt_geracao = f"""
Com base nas seguintes atividades j√° existentes de um plano de aula:

{st.session_state.atividades_anteriores}

Crie novas atividades no n√≠vel de dificuldade **{nivel_desejado}**, mantendo coer√™ncia com o tema original, mas sem repetir exatamente as anteriores. As novas atividades devem ser compat√≠veis com os crit√©rios do n√≠vel escolhido.

Descreva claramente as novas atividades geradas.
"""

            try:
                resposta_geracao = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um criador de atividades educacionais com foco pedag√≥gico."},
                        {"role": "user", "content": prompt_geracao}
                    ],
                    temperature=0.7,
                    max_tokens=1000
                )

                novas_atividades = resposta_geracao.choices[0].message.content.strip()
                st.subheader("üÜï Novas Atividades Geradas:")
                st.markdown(novas_atividades)

            except Exception as e:
                st.error(f"Erro ao gerar novas atividades: {str(e)}")
